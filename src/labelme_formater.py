import argparse
import os
import json
from typing import Dict
import cv2
import uuid
import random

## FIELDS IN JSON FILES GENERATED BY LABELME ##
LABEL_INFO = "shapes"  # dictionary with label info in images
LICENSE_PLATE = (
    "label"  # key name in dictionary shapes: string with lincense plate number
)
COORDINATES = "points"  # key name in dictionary of shapes: [[x1, y1] [x2, y2]]
IMAGE_HEIGHT = "imageHeight"  # int
IMAGE_WIDTH = "imageWidth"  # int
IMAGE_NAME = "imagePath"  # str
LICENSE_PLATE_ID = "0"
IMAGES_TRAIN_DIR = "yolo/images/train"
IMAGES_VAL_DIR = "yolo/images/val"
LABELS_TRAIN_DIR = "yolo/labels/train"
LABELS_VAL_DIR = "yolo/labels/val"
YAML_DESCRIPTOR = "yolo/data.yaml"
PLATE_IMG_TRAIN_DIR = "fast_ocr/train/images"
PLATE_IMG_VAL_DIR = "fast_ocr/valid/images"
PLATE_LABEL_TRAIN_CSV = "fast_ocr/train/annotations.csv"
PLATE_LABEL_VAL_CSV = "fast_ocr/valid/annotations.csv"
PLATE_CONFIG = "fast_ocr/plate_config.yaml"

def plateConfig(out_directory: str) -> None:
    with open(os.path.join(out_directory, PLATE_CONFIG), "w") as f:
        f.write('max_plate_slots: 8\n')
        f.write('alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_"\n')
        f.write('pad_char: "_"  \n')
        f.write('img_height: 64\n')
        f.write('img_width: 160\n')
        f.write('keep_aspect_ratio: true\n')
        f.write('interpolation: linear  \n')
        f.write('image_color_mode: rgb\n')

def getLabelLinesFormat(data: Dict) -> str:
    lines = []
    for shape in data[LABEL_INFO]:
        poinst = shape[COORDINATES]
        x1, y1 = poinst[0]
        x2, y2 = poinst[1]

        width = data[IMAGE_WIDTH]
        height = data[IMAGE_HEIGHT]

        # normalize data
        centerx = (x1 + x2) / 2 / width
        centery = (y1 + y2) / 2 / height
        w = abs(x2 - x1) / width
        h = abs(y2 - y1) / height

        lines.append(
            f"{LICENSE_PLATE_ID} {centerx: .6f} {centery: .6f} {w: .6f} {h: .6f}",
        )
    return "\n".join(lines)

def copyImage(image_directory: str, filename: str, out_directory: str, train: bool=True) -> None:
    subdir = IMAGES_TRAIN_DIR if train else IMAGES_VAL_DIR
    image_path = os.path.join(image_directory, filename.replace(".json", ".jpg"))
    new_image_path = os.path.join(out_directory, subdir, filename.replace(".json", ".jpg"))

    if os.path.isfile(image_path):
        os.makedirs(os.path.dirname(new_image_path), exist_ok=True)
        if not os.path.exists(new_image_path):
            os.system(f"cp {image_path} {new_image_path}")

def createYamlDescriptor(out_directory: str) -> None:
    with open(os.path.join(out_directory, YAML_DESCRIPTOR), "w") as file:
        file.write(f"path: {out_directory}\n")
        file.write(f"train: {IMAGES_TRAIN_DIR}\n")
        file.write(f"val: {IMAGES_VAL_DIR}\n")
        file.write(f"names:\n")
        file.write(f"    {LICENSE_PLATE_ID}: license_plate\n")

def formatLicensePlates(image_directory: str, out_directory: str, data: Dict, train: bool=True) -> None:
    img_path = os.path.join(image_directory, data[IMAGE_NAME])
    img = cv2.imread(img_path)
    if img is None:
        print(f"[WARN] Could not read image: {img_path}")
        return

    plate_img_dir = os.path.join(out_directory, PLATE_IMG_TRAIN_DIR if train else PLATE_IMG_VAL_DIR)
    os.makedirs(plate_img_dir, exist_ok=True)

    label_csv = os.path.join(out_directory, PLATE_LABEL_TRAIN_CSV if train else PLATE_LABEL_VAL_CSV)
    with open(label_csv, "a") as f:
        for shape in data[LABEL_INFO]:
            license_plate = shape[LICENSE_PLATE].upper()
            license_plate = license_plate.replace(" ", "_")
            license_plate = license_plate.replace("-", "")
            x1, y1 = shape[COORDINATES][0]
            x2, y2 = shape[COORDINATES][1]
            x1, y1, x2, y2 = map(int, [x1, y1, x2, y2])

            cropped_img = img[min(y1,y2):max(y1,y2), min(x1,x2):max(x1,x2)]
            unique_id = uuid.uuid4().hex[:8]
            filename = f"{unique_id}.jpg"
            img_out_path = os.path.join(plate_img_dir, filename)

            cv2.imwrite(img_out_path, cropped_img)
            f.write(f"images/{filename},{license_plate}\n")

def formatDataset(
    label_directory: str, image_directory: str, out_directory: str, val_ratio: float = 0.2
) -> None:
    # collect all json files
    json_files = [f for f in os.listdir(label_directory) if f.endswith(".json")]
    random.shuffle(json_files)

    n_val = int(len(json_files) * val_ratio)
    val_files = set(json_files[:n_val])
    train_files = set(json_files[n_val:])

    # dirs
    labels_train_out = os.path.join(out_directory, LABELS_TRAIN_DIR)
    labels_val_out = os.path.join(out_directory, LABELS_VAL_DIR)
    os.makedirs(labels_train_out, exist_ok=True)
    os.makedirs(labels_val_out, exist_ok=True)
    os.makedirs(os.path.join(out_directory, IMAGES_TRAIN_DIR), exist_ok=True)
    os.makedirs(os.path.join(out_directory, IMAGES_VAL_DIR), exist_ok=True)
    os.makedirs(os.path.join(out_directory, PLATE_IMG_TRAIN_DIR), exist_ok=True)
    os.makedirs(os.path.join(out_directory, PLATE_IMG_VAL_DIR), exist_ok=True)
    
    with open(os.path.join(out_directory, PLATE_LABEL_TRAIN_CSV), "w") as f:
        f.write("image_path,plate_text\n")
    with open(os.path.join(out_directory, PLATE_LABEL_VAL_CSV), "w") as f:
        f.write("image_path,plate_text\n")

    for file in json_files:
        json_path = os.path.join(label_directory, file)
        with open(json_path, "r") as rf:
            data = json.load(rf)

        # label txt path
        if file in train_files:
            label_txt_dir = os.path.join(labels_train_out, file.replace(".json", ".txt"))
        else:
            label_txt_dir = os.path.join(labels_val_out, file.replace(".json", ".txt"))

        with open(label_txt_dir, "w") as wf:
            wf.write(getLabelLinesFormat(data))

        # copy images to correct split

        if file in train_files:
            copyImage(image_directory, file, out_directory, train=True)
            formatLicensePlates(image_directory, out_directory, data, train=True)
        else:
            copyImage(image_directory, file, out_directory, train=False)
            formatLicensePlates(image_directory, out_directory, data, train=False)

    createYamlDescriptor(out_directory)
    plateConfig(out_directory)

# CLI
parser = argparse.ArgumentParser(
    prog="labelme2yolo",
    description="Convert .json files created by labelme to a YOLO+PaddleORC's dataset format",
)
parser.add_argument(
    "-i",
    "--images_dir",
    type=str,
    default=os.getcwd(),
    help="Set path directory where images are stored (default 'current_dir')",
)
parser.add_argument(
    "-l",
    "--labels_dir",
    type=str,
    default=os.getcwd(),
    help="Set path to directory where labels are stored (defalut 'current_dir')",
)

parser.add_argument(
    "-o",
    "--output_dir",
    type=str,
    default=os.path.join(os.getcwd(), "dataset"),
    help="Set path directory where dataset will be saved (default 'current_dir/dataset')",
)

args = parser.parse_args()

if not os.path.isdir(args.labels_dir):
    raise Exception(f"Can not open directory {args.labels_dir}")
if not os.path.isdir(args.images_dir):
    raise Exception(f"Can not open directory {args.images_dir}")
os.makedirs(args.output_dir, exist_ok=True)

formatDataset(args.labels_dir, args.images_dir, args.output_dir)
